// views/create.pug
doctype html
html
  head
    title Create Crowdfunding Project
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet', href='/style.css')
  body
    .menu-container
      nav
        ul
          li: a(href="/") Home
    br
    h1 Create New Project
    br
    if error
      p.error #{error}
    
    form(action='/create', method='post')
      h2 Crowdfunding detail
      label Creator:
      input(type='text', name='owner', required)
      br
      br
      label Title:
      input(type='text', name='title', required)
      br
      br
      label Description:
      textarea(name='description', required)
      br
      br
      label Goal ($):
      input(type='number', name='goal', required)
      br
      br
      label Deadline:
      input(type='date', name='deadline', required)
      br
      br
      br
      h2 Payment option
      if(coinsDepositList)
        - var networks = []
        - coinsDepositList.forEach(coin => {
          - var network = coin[0].split('-')[1]
          - if (!networks.includes(network)) {
            - networks.push(network)
          - }
        - })
        label Select Coin Network (#{networks.length})
        br
        select(name="network_filter")
          option(value="all" selected) All Networks
            - networks.forEach(network => {
            option(value=network)= network
          - })

        br
        label#text Select Coin
        br
        select(name="payWith")
          each coin in coinsDepositList
            option(value=coin) #{coin[0]}
            //- option(value=coin) #{coin[0].split('-')[0]}

     
      br
      br
      label Wallet address:
      input(type='text', name='address', required)
      br
      br
      button(type='submit').cool-button Create Project




script.
  document.addEventListener('DOMContentLoaded', function() {
    const networkSelect = document.querySelector('select[name="network_filter"]');
    const payWithSelect = document.querySelector('select[name="payWith"]');

    // Function to filter options based on selected network
    function filterOptions() {
      const selectedNetwork = networkSelect.value;

      // Get all options from the pay_with select
      const options = Array.from(payWithSelect.options);
      let firstVisibleOption = null;
      let counter = 0;

      options.forEach(option => {
        const optionValue = JSON.parse(option.value); 
        const optionNetwork = optionValue[0].split('-')[1];
        if (selectedNetwork === 'all' || optionNetwork === selectedNetwork) {
          option.style.display = '';
          if (firstVisibleOption === null) {
            firstVisibleOption = option.value;
          }
          counter++;
        } else {
          option.style.display = 'none';
        }
      });
      document.getElementById('text').innerText = "Select coin ("+counter+")";
      
      // Update select value to first visible option if we have one
      if (firstVisibleOption !== null) {
      payWithSelect.value = firstVisibleOption;
      }
    }

    networkSelect.addEventListener('change', filterOptions);

    filterOptions();
  });

